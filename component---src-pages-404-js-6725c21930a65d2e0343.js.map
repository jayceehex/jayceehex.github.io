{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.tsx","webpack:///./src/components/seo.js","webpack:///./src/pages/404.js"],"names":["Header","siteTitle","className","defaultProps","Layout","path","author","navLinks","location","lightMode","toggleLightMode","children","data","useStaticQuery","site","siteMetadata","pathname","find","navLink","link","name","id","SEO","description","lang","meta","title","metaDescription","defaultTitle","Helmet","htmlAttributes","titleTemplate","content","property","concat","connect","state","isLightMode","app","dispatch"],"mappings":"2JAIMA,G,oBAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACb,yBAAKC,UAAU,eACb,4BAAQA,UAAU,UACd,wBAAIA,UAAU,gBACXD,OAUXD,EAAOG,aAAe,CACpBF,UAAU,IAGGD,Q,wBC4CAI,IAnDA,SAAC,GAAuD,UAiBnEC,EACAC,EACAC,EAHgB,EAhBFC,EAAqD,EAArDA,SAAUC,EAA2C,EAA3CA,UAAWC,EAAgC,EAAhCA,gBAAiBC,EAAe,EAAfA,SAChDC,EAAOC,yBAAe,aAwB5B,OACE,yBAAKX,UAAS,aAAcO,EAAY,eAAiB,KACvD,kBAAC,IAAD,CACEF,UAAU,UAAAK,EAAKE,KAAKC,oBAAV,eAAwBR,WAAY,GAC9CG,gBAAiBA,EACjBD,UAAWA,IAEb,kBAAC,EAAD,CACER,WAhBJI,EAiBMG,EAASQ,SAhBfV,GAiBM,UAAAM,EAAKE,KAAKC,oBAAV,eAAwBT,SAAxB,GAhBNC,GAiBM,UAAAK,EAAKE,KAAKC,oBAAV,eAAwBR,WAAY,GAfjC,MAATF,EACIC,GACA,UAAAC,EAASU,MAAK,SAAAC,GAAO,OAAIA,EAAQC,MAAQd,YAAzC,eAAgDe,OAAhD,MAgBF,yBAAKlB,UAAU,eACb,0BAAMmB,GAAG,QAAQV,IAEnB,kBAAC,IAAD,S,sGC7CN,SAASW,EAAT,GAAkD,IAAD,IAAlCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAC9BZ,EAASD,yBAAe,YAAxBC,KAcFa,EAAkBJ,GAAeT,EAAKC,aAAaQ,YACnDK,EAAY,UAAGd,EAAKC,oBAAR,aAAG,EAAmBW,MAExC,OACE,kBAACG,EAAA,EAAD,CACEC,eAAgB,CACdN,QAEFE,MAAOA,EACPK,cAAeH,EAAY,QAAWA,EAAiB,KACvDH,KAAM,CACJ,CACEL,KAAK,cACLY,QAASL,GAEX,CACEM,SAAS,WACTD,QAASN,GAEX,CACEO,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACEZ,KAAK,eACLY,QAAQ,WAEV,CACEZ,KAAK,kBACLY,SAAS,UAAAlB,EAAKC,oBAAL,eAAmBT,SAAnB,IAEX,CACEc,KAAK,gBACLY,QAASN,GAEX,CACEN,KAAK,sBACLY,QAASL,IAEXO,OAAOT,KAKfH,EAAInB,aAAe,CACjBqB,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD,Q,wBCrEAa,uBACb,SAAAC,GAAK,MAAK,CACRC,YAAaD,EAAME,IAAID,eAEzB,KAJaF,EAZM,SAAC,GAAD,IAAG3B,EAAH,EAAGA,SAAU+B,EAAb,EAAaA,SAAUF,EAAvB,EAAuBA,YAAvB,OACnB,kBAAC,IAAD,CACE7B,SAAUA,EACVE,gBAAiB,kBAAM6B,EAAS7B,aAAiB2B,KACjD5B,UAAW4B,GAEX,kBAAC,EAAD,CAAKX,MAAM,mBACX,8CACA","file":"component---src-pages-404-js-6725c21930a65d2e0343.js","sourcesContent":["import PropTypes from \"prop-types\"\nimport React from \"react\"\nimport \"./header.scss\"\n\nconst Header = ({ siteTitle }) => (\n  <div className=\"content-box\">\n    <header className=\"header\">\n        <h1 className=\"header__text\">\n          {siteTitle}\n        </h1>\n    </header>\n  </div>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport \"./layout.scss\"\nimport Header from \"./header\"\nimport Footer from \"./footer\"\nimport MainNav from \"./main-nav\"\n\nconst Layout = ({ location, lightMode, toggleLightMode, children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          author\n          navLinks {\n            name\n            link\n          }\n        }\n      }\n    }\n  `)\n\n  const siteTitle = (\n    path: string,\n    author: string,\n    navLinks: Array<any>\n  ): string =>\n    path === \"/\"\n      ? author\n      : navLinks.find(navLink => navLink.link == path)?.name || ``\n\n  return (\n    <div className={`container${lightMode ? \" light-theme\" : \"\"}`}>\n      <MainNav\n        navLinks={data.site.siteMetadata?.navLinks || []}\n        toggleLightMode={toggleLightMode}\n        lightMode={lightMode}\n      />\n      <Header\n        siteTitle={siteTitle(\n          location.pathname,\n          data.site.siteMetadata?.author || ``,\n          data.site.siteMetadata?.navLinks || []\n        )}\n      />\n      <div className=\"content-box\">\n        <main id=\"main\">{children}</main>\n      </div>\n      <Footer />\n    </div>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.author || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { toggleLightMode } from \"../state/app\"\nimport { connect } from \"react-redux\"\n\nconst NotFoundPage = ({ location, dispatch, isLightMode }) => (\n  <Layout\n    location={location}\n    toggleLightMode={() => dispatch(toggleLightMode(!isLightMode))}\n    lightMode={isLightMode}\n  >\n    <SEO title=\"404: Not found\" />\n    <h1>404: Not Found</h1>\n    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n  </Layout>\n)\n\nexport default connect(\n  state => ({\n    isLightMode: state.app.isLightMode,\n  }),\n  null\n)(NotFoundPage)\n"],"sourceRoot":""}